// Generated by LiveScript 1.4.0
(function(){
  var async, ribcage, colors, _, h, p, express, ejs, compression, cookieParser, env, settings, initRibcage, initRoutes, initModels;
  async = require('async');
  ribcage = require('ribcage');
  colors = require('colors');
  _ = require('underscore');
  h = require('helpers');
  p = require('bluebird');
  express = require('express');
  ejs = require('ejs');
  compression = require('compression');
  cookieParser = require('cookie-parser');
  env = {};
  env.settings = settings = {
    production: false,
    module: {
      db: {
        name: 'cal',
        host: 'localhost',
        port: 27017
      },
      logger: {
        outputs: {
          Console: {}
        }
      },
      express4: {
        port: 3001,
        'static': __dirname + '/static',
        views: __dirname + '/views',
        cookiesecret: 'QUoOiNLr6DeMRRM9jVVoriK7Wt12mw7EOGOxqMao+',
        log: false
      }
    }
  };
  initRibcage = function(){
    var this$ = this;
    return new p(function(resolve, reject){
      env.settings.module.express4.configure = function(app){
        var this$ = this;
        app.use(cookieParser());
        app.set('view engine', 'ejs');
        app.set('views', env.settings.module.express4.views);
        app.use(express['static'](env.settings.module.express4['static'], {
          setHeaders: function(req){
            req.removeHeader('Date');
            return req.setHeader('Cache-Control', 'public');
          },
          index: false,
          lastModified: false,
          redirect: false,
          etag: true,
          dotfiles: 'ignore'
        }));
        app.use(compression());
        app.set('x-powered-by', false);
        return env.app.use(function(err, req, res, next){
          if (!env.settings.production) {
            res.status(500).send(util.inspect(err));
            throw err;
          }
          env.log('web request error', {
            error: util.inspect(err)
          }, 'error', 'http');
          console.error(util.inspect(err));
          return res.status(500).send('error 500');
        });
      };
      return ribcage.init(env, function(err, modules){
        if (err) {
          return reject(err);
        } else {
          return resolve(true);
        }
      });
    });
  };
  initRoutes = function(){
    var this$ = this;
    return new p(function(resolve, reject){
      return env.app.get('/', function(req, res){
        return res.render('index', {
          title: 'resbou cal',
          version: env.version,
          production: env.settings.production
        });
      });
    });
  };
  initModels = function(){
    var this$ = this;
    return new p(function(resolve, reject){
      var MongoCollection;
      return MongoCollection = collections.MongoCollection.extend4000({
        defaults: {
          db: env.db
        }
      }, env.entities = new liveMongo({
        collection: 'entities'
      }), env.addresses = new liveMongo({
        collection: 'addresses'
      }), env.transactions = new liveMongo({
        collection: 'transactions'
      }), env.entity = env.entities.defineModel('entity', {
        defaults: {
          balance: 0
        }
      }));
    });
  };
  initRibcage().then(function(){
    return initRoutes().then(function(){
      return env.log('initialized', {}, 'init', 'done');
    });
  });
}).call(this);
